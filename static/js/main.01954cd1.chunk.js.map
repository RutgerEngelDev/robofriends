{"version":3,"sources":["../../src/components/Card.js","../../src/components/CardList.js","../../src/components/SearchBox.js","../../src/robots.js","../../src/components/Scroll.js","../../src/containers/App.js","../../src/serviceWorker.js","../../src/index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardsArray","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01954cd1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='profile pic' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardsArray = robots.map((user, i) => {\r\n        return <Card key={user.id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange} ) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robots } from '../robots';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users => this.setState({ robots: users}));\r\n            this.setState({ robots: robots})\r\n    }\r\n\r\n    onSearchChange= (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        if (!robots.length) {\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}